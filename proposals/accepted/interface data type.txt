Proposal to Implement Interface Data Types in the Fiber Programming Language

Author: fiber Group

Purpose:
  The fiber programming language already allows ad-hoc overloading of functions,
operators, and arbitrary syntax patterns. Interface data types would explicitly
require the overloading of a set of functions for each instantiation of that
data type. This allows for normal dependent data types to be extended with 
associated functions and syntax.

Description:
  An interface data type would extend the syntax used for declaring dependent 
data types. In an interface type, only one secondary type position may be 
declared. After the secondary type declaration, a number of generic functions 
are declared. These function declarations can overload already existing 
functions. Each function declaration must the be overloaded with typed 
parameters supporting the data type of the secondary type.

  For example, if the interface data type "T" was defined with functions "FOO"
and "BAR" which both accept one interface parameter and one other parameter, the
instantiation of "T a" would require that both "FOO" and "BAR" be overloaded 
to support a parameter of the data type "T a".

Syntax:
  Interface data types make use of already existing syntax used in a different
configuration.