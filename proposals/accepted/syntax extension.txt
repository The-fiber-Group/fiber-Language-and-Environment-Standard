Proposal to Add Syntax Extension Capabilities to the Fiber Programming Language

Author: Fiber Group

Purpose:
  Syntax Extensions would allow new operators and syntax to be introduced by the
programmer that will be interpreted normally as part of the base Fiber syntax.
The ability to add new syntax and operators to Fiber allows programmers to 
represent problems with a descriptive syntax that suits the problem, rather than
having to adapt the domain of a problem to the semantics of the base Fiber 
language.

Description:
  The syntax extension system for Fiber shall consist of a means to describe a 
pattern of tokens, a means to select individual tokens and sub-expressions from
that pattern, a means to perform syntactic transformations on tokens or sub-
expressions, and a means to explicitly perform evaluation in a specific order on
any portion of the described syntax pattern or other generated expressions.

Syntax:
  The syntax extension system shall use the existing syntax patterns for 
defining a function as the means for declaring the actions performed by a syntax
extension.

  The syntax pattern defined for an indiviual syntax expression shall occupy
the area of the functiond definition syntax where the function signature would
otherwise be.

Syntax Pattern Description:
  The syntax pattern shall be described using quotation to specify operators and 
keywords. The syntax pattern may also be described using named type parameters 
similarly to a function.

  Operators and keywords shall be described using string syntax. The characters
included in the operator or keyword shall be surrounded by a pair of double 
quotes. If the operator or keyword contains double quotation characters, it 
shall instead be surrounded by a pair of single quotes.

  A repreating pattern shall be specified by the postfix asterisk operator, *.
An optional numerical constant can follow the asterisk to specify a specific 
number of repetitions.

  Parentheses are used to specify a pattern containing multiple tokens. The 
tokens in the order that they are expected to occur are written within the 
parentheses.

  The pipe character is used to denote two patterns that may appear at the same
position. The pipe character can apper between any two patterns and tokens.

  A syntax extension may optionally include input and output parameters as in
a normal function.

Effect on Evaluation:
  The syntax extension system shall execute any transformations during the 
interpretation of a program. The evaluation of syntax shall be performed during 
the execution of a program according to the order it was specified in the 
syntax extension. Named type parameters in a description shall be evaluated 
implictly when they occur in the pattern like the evaluation method for a 
function call.

Examples:
  A simple example of overloading the addition operator in Fiber.

	{; x:int "+" y:int -> z:int :
		z = x + y
	}

