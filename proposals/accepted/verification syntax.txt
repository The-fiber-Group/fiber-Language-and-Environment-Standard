Proposal for Implementing Verification Syntax in the Fiber Programming Language

Author: fiber Group

Purpose:
  Implementing a program verification syntax will allow formal verification to 
take place as a stage during the compilation/interpretation of a program without
the need for additional software or higher-abstraction languages.

Description:
  The Verification Syntax would use an extended form of Hoare Logic. Execution 
points could be annotated in the program allowing for the domain of the 
"command" portion of the Hoare triple to be set to any granularity and position.

  The command of the hoare tripele is identified using a Symbol. A logical 
assignment operator is then used to assoiate that command with a number of pre
and post conditions. The conditions for that command are specified using an 
expression containing comparisons and logical connectives. A special prefix 
operator is used to refer to program variable state post-command. Variables 
used in the logical expression normally refer to their state pre-command.

  The names of other commands can be included in any logic statement as a 
boolean value. If the assertions for that command are met, then the command 
represents a true value in other logic expressions, otherwise it represents 
false. Command names must be prefixed to distinct them from normal program 
object names.

  Normal fiber syntax is annotated with command names and command domains. Two
enclosing operators are used to declare the syntax included in the domain of a 
command. The pre and post conditions for that command will be compared against 
the effects of the program contained in the command domain.

Syntax:

  logical assignment of command to conditions:	=:

  post-command state prefix:			'

  command distinction prefix:			!#

  logical and operator:				&&

  logical or operator:				||

  logical not operator:				!!

  logical implication operator:			=>

  command domain opening operator:			!#

  command domain closing operator:			#!


Example:

	command-x =: (x < 100) && ( 'x > 100)

	!#command 
		x = x + 100
	#!