``insertion sort``
{insrt list: [ [*] _ N] -> list |
        ``i and j must be positive and less than the length of list``
        i: [ N < #list] = 0
        j: [ N < #list]
        tmp: [- list_1
        ``   ^^^^^^^^^
	  this ensures that tmp has the same type as the list elements
	``

        shift: ()
	``the closed parens is the continuation type``

        (loop = ( . ``outer loop iterates up the list elements``
                ? i < # loop ``only run the loop if i is within the list``
                (
                        tmp = list_i
                        j = i
                        (shift) ``run the swap loop to shift elements up``
                        list_j = tmp ``place the element``
                        (loop) ``keep looping``
                ) ( ) ``empty else condition``
        ) )

        shift = ( . ``shift list elements upward``
                ? (j > 0) /\ (list _ (j - 1) > tmp)
                (
                        list _ j = list _ (j - 1)
                        j = j - 1
                ) ( )
        )
}

``declare some unsorted list``
(stuff = [N_5] ) :=: (7;45;9;2;0)
stuff = (insrt stuff)
stuff ``=> 0, 2, 7, 9, 45``


``proving left-pad``

{left-pad 
  c:char ``padding character`` 
  count:N ``number of pads``
  str: [char_N] ``string to pad``
-> 
  padded: [ (c) _count ; (str) ]
  ``this  ^^^^^^^^^^^^^^^^^^^^^^ says that
    the first portion of the string must be an array of the "c" parameter's 
    character and the second portion of the string must be the original 
    string.
  ``
|
  i: [N < #padded] = 0 
  ``iterator must be positive and less than the length of "padded"

  (pad-loop = ( . 
    padded_i = c 
    ? (i < # padded) /\ (i < count) 
    ( i = i + 1 (pad-loop) )
    (/) ``no else condition``
  ) )

  j = [N < #str] = 0
 
  (copy-loop = ( . 
    padded_i = str_j
    ? (i < # padded) /\ (j < #str)
    ( 
      i = i + 1 
      j = j + 1
      (copy-loop)
    ) 
    (/)
  ) )
}



``prove a tree depth``

end = N
next = [ a: @.tree ; end ]
list = [end next]

{depth s:list -> depth:N |
	
